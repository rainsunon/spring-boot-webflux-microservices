version: '3'

services:
  auth-service:
    container_name: auth-service
    image: ghcr.io/mark1708/auth-service-test-case:v1.0.0
    environment:
      PROFILES: prod
      TOKEN_TYPE: ${TOKEN_TYPE}
      TOKEN_SECRET: ${TOKEN_SECRET}
      TOKEN_EXPIRATION: ${TOKEN_EXPIRATION}
      USER_SERVICE_URL: http://user-service:8080
    ports:
      - '8081:8080'
    networks:
      - backend
    depends_on:
      - mitrasoft-db
    deploy:
      restart_policy:
        condition: on-failure

  user-service:
    container_name: user-service
    image: ghcr.io/mark1708/user-service-test-case:v1.0.0
    environment:
      PROFILES: prod
      R_POSTGRES_SERVER: ${R_POSTGRES_SERVER}
      POSTGRES_SERVER: ${POSTGRES_SERVER}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      AUTH_SERVICE_URL: http://auth-service:8080
    ports:
      - '8080:8080'
    networks:
      - backend
    depends_on:
      - mitrasoft-db
    deploy:
      restart_policy:
        condition: on-failure

  mitrasoft-db:
    container_name: mitrasoft-db
    image: postgres:12.2-alpine
    environment:
      POSTGRES_USER: "my-root-postgres"
      POSTGRES_PASSWORD: "d9GPTA5GjawztoYIJc"
    ports:
      - "5432:5432"
    volumes:
      - ./init:/docker-entrypoint-initdb.d/
    networks:
      - backend
    deploy:
      restart_policy:
        condition: on-failure

networks:
  backend: